var kongUtil;(()=>{"use strict";var t={571:(t,n,e)=>{e.d(n,{default:()=>i});const r={};Object.assign(r,{use:function(...t){t[0]instanceof Array&&(t=t[0]);for(let n in r)"use"!==n&&(t.length&&!t.includes(n)||(globalThis[n]=r[n]))}});const i=r}},n={};function e(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return t[r](o,o.exports,e),o.exports}e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var r={};(()=>{e.r(r),e.d(r,{default:()=>g,everyAsync:()=>n,extendArrayPrototype:()=>A,filterAsync:()=>i,findAsync:()=>o,findIndexAsync:()=>s,findLastAsync:()=>a,findLastIndexAsync:()=>c,forEachAsync:()=>y,mapAsync:()=>f,reduceAsync:()=>l,reduceRightAsync:()=>u,someAsync:()=>d});var t=e(571);async function n(t,n=this){return(await f(t,n)).every((t=>t))}async function i(t,n=this){const e=[];for(let r=0;r<n.length;++r)await t(n[r],r,n)&&e.push(n[r]);return e}async function o(t,n=this,e){for(let r=0;r<n.length;++r)if(await t(n[r],r,n))return e?r:n[r];return e?-1:void 0}const s=(t,n)=>o(t,n,!0);async function a(t,n=this,e){for(let r=n.length-1;r>=0;--r)if(await t(n[r],r,n))return e?r:n[r];return e?-1:void 0}const c=(t,n)=>a(t,n,!0);async function y(t,n=this){for(let e=0;e<n.length;++e)await t(n[e],e,n)}async function f(t,n=this){const e=[];for(let r=0;r<n.length;++r)e.push(await t(n[r],r,n));return e}async function l(t,n,e=this){let r=n,i=0;if(void 0===n){if(!e.length)throw new TypeError("Reduce of empty array with no initial value");r=e[0],i=1}for(let n=i;n<e.length;++n)r=await t(r,e[n],n,e);return r}async function u(t,n,e=this){let r=n,i=e.length-1;if(void 0===n){if(!e.length)throw new TypeError("Reduce of empty array with no initial value");r=e[i],--i}for(let n=i;n>=0;--n)r=await t(r,e[n],n,e);return r}const d=(t,n)=>s(t,n).then((t=>-1!==t)),h={everyAsync:n,filterAsync:i,findAsync:o,findIndexAsync:s,findLastAsync:a,findLastIndexAsync:c,forEachAsync:y,mapAsync:f,reduceAsync:l,reduceRightAsync:u,someAsync:d},A=()=>Object.assign(Array.prototype,h);Object.assign(t.default,h,{extendArrayPrototype:A});const g=t.default})(),kongUtil=r})();